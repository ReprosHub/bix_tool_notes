{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction To be added","title":"Introduction"},{"location":"#introduction","text":"To be added","title":"Introduction"},{"location":"note/","text":"/mnt/ccrsf-static/Analysis/xies4/github_repos/ngs_software_testing_notes micromamba activate condaenv4bix_tool_notes_scatac","title":"Note"},{"location":"scatac_signac_pbmc/","text":"Analysis of scATAC-seq data in PBMC using Signac In this note, the data is from 10x. Cellranger report can be found in the link here . micromamba activate condaenv4bix_tool_notes_scatac export R_LIBS=/home/xies4/micromamba/envs/condaenv4bix_tool_notes_scatac/lib/R/library/ Data downloading To download all the required files, you can run the following lines in a shell: getwd() '/mnt/ccrsf-static/Analysis/xies4/github_repos/ngs_software_testing_notes/docs' cat(system(\"cat ./scatac_signac_pbmc/s1_dl.sh\", intern = T), sep = \"\\n\") #!/bin/bash wget https://cf.10xgenomics.com/samples/cell-atac/2.1.0/10k_pbmc_ATACv2_nextgem_Chromium_Controller/10k_pbmc_ATACv2_nextgem_Chromium_Controller_filtered_peak_bc_matrix.h5 wget https://cf.10xgenomics.com/samples/cell-atac/2.1.0/10k_pbmc_ATACv2_nextgem_Chromium_Controller/10k_pbmc_ATACv2_nextgem_Chromium_Controller_singlecell.csv wget https://cf.10xgenomics.com/samples/cell-atac/2.1.0/10k_pbmc_ATACv2_nextgem_Chromium_Controller/10k_pbmc_ATACv2_nextgem_Chromium_Controller_fragments.tsv.gz wget https://cf.10xgenomics.com/samples/cell-atac/2.1.0/10k_pbmc_ATACv2_nextgem_Chromium_Controller/10k_pbmc_ATACv2_nextgem_Chromium_Controller_fragments.tsv.gz.tbi cat(system(\"head 10k_pbmc_ATACv2_nextgem_Chromium_Controller_singlecell.csv\", intern = T), sep=\"\\n\") barcode,total,duplicate,chimeric,unmapped,lowmapq,mitochondrial,nonprimary,passed_filters,is__cell_barcode,excluded_reason,TSS_fragments,DNase_sensitive_region_fragments,enhancer_region_fragments,promoter_region_fragments,on_target_fragments,blacklist_region_fragments,peak_region_fragments,peak_region_cutsites NO_BARCODE,20081988,3972351,3423,2118408,1159348,23059,4131,12801268,0,0,0,0,0,0,0,0,0,0 AAACGAAAGAAACGCC-1,4,0,0,0,0,0,0,4,0,0,1,0,0,0,1,0,2,4 AAACGAAAGAAAGCAG-1,3,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,1,2 AAACGAAAGAAAGGGT-1,2,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,2 AAACGAAAGAAATACC-1,17,0,0,0,0,0,0,17,0,0,11,0,0,0,11,0,14,27 AAACGAAAGAAATCTG-1,1,0,0,0,0,0,0,1,0,2,0,0,0,0,0,0,0,0 AAACGAAAGAAATGGG-1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0 AAACGAAAGAAATTCG-1,4,0,0,0,1,0,0,3,0,0,1,0,0,0,1,0,2,4 AAACGAAAGAACAGGA-1,2,0,0,0,0,0,0,2,0,0,2,0,0,0,2,0,2,4 Load R packages library(Signac) library(Seurat) library(ggplot2) library(patchwork) library(GenomicRanges) Loading required package: SeuratObject Loading required package: sp Attaching package: \u2018SeuratObject\u2019 The following objects are masked from \u2018package:base\u2019: intersect, t Loading required package: stats4 Loading required package: BiocGenerics Attaching package: \u2018BiocGenerics\u2019 The following object is masked from \u2018package:SeuratObject\u2019: intersect The following objects are masked from \u2018package:stats\u2019: IQR, mad, sd, var, xtabs The following objects are masked from \u2018package:base\u2019: anyDuplicated, aperm, append, as.data.frame, basename, cbind, colnames, dirname, do.call, duplicated, eval, evalq, Filter, Find, get, grep, grepl, intersect, is.unsorted, lapply, Map, mapply, match, mget, order, paste, pmax, pmax.int, pmin, pmin.int, Position, rank, rbind, Reduce, rownames, sapply, setdiff, sort, table, tapply, union, unique, unsplit, which.max, which.min Loading required package: S4Vectors Attaching package: \u2018S4Vectors\u2019 The following object is masked from \u2018package:utils\u2019: findMatches The following objects are masked from \u2018package:base\u2019: expand.grid, I, unname Loading required package: IRanges Attaching package: \u2018IRanges\u2019 The following object is masked from \u2018package:sp\u2019: %over% Loading required package: GenomeInfoDb Data preprocessing Signac uses information from two related input files, both of which can be created using CellRanger: Peak/Cell matrix. This is analogous to the gene expression count matrix used to analyze single-cell RNA-seq. However, instead of genes, each row of the matrix represents a region of the genome (a peak), that is predicted to represent a region of open chromatin. Each value in the matrix represents the number of Tn5 integration sites for each single barcode (i.e. a cell) that map within each peak. You can find more detail on the 10X Website. Fragment file. This represents a full list of all unique fragments across all single cells. It is a substantially larger file, is slower to work with, and is stored on-disk (instead of in memory). However, the advantage of retaining this file is that it contains all fragments associated with each single cell, as opposed to only fragments that map to peaks. More information about the fragment file can be found on the 10x Genomics website or on the sinto website. counts <- Read10X_h5(filename = \"10k_pbmc_ATACv2_nextgem_Chromium_Controller_filtered_peak_bc_matrix.h5\") metadata <- read.csv( file = \"10k_pbmc_ATACv2_nextgem_Chromium_Controller_singlecell.csv\", header = TRUE, row.names = 1 ) chrom_assay <- CreateChromatinAssay( counts = counts, sep = c(\":\", \"-\"), fragments = \"10k_pbmc_ATACv2_nextgem_Chromium_Controller_fragments.tsv.gz\", min.cells = 10, min.features = 200 ) pbmc <- CreateSeuratObject( counts = chrom_assay, assay = \"peaks\", meta.data = metadata ) pbmc An object of class Seurat 165434 features across 10246 samples within 1 assay Active assay: peaks (165434 features, 0 variable features) 2 layers present: counts, data Similar to scRNA-seq, you can also read the count matrix stored in three files under the folder: filtered_peak_bc_matrix : counts <- Matrix::readMM(\"filtered_peak_bc_matrix/matrix.mtx\") barcodes <- readLines(\"filtered_peak_bc_matrix/barcodes.tsv\") peaks <- read.table(\"filtered_peak_bc_matrix/peaks.bed\", sep=\"\\t\") peaknames <- paste(peaks$V1, peaks$V2, peaks$V3, sep=\"-\") colnames(counts) <- barcodes rownames(counts) <- peaknames pbmc[['peaks']] ChromatinAssay data with 165434 features for 10246 cells Variable features: 0 Genome: Annotation present: FALSE Motifs present: FALSE Fragment files: 1 granges(pbmc) GRanges object with 165434 ranges and 0 metadata columns: seqnames ranges strand <Rle> <IRanges> <Rle> [1] chr1 9772-10660 * [2] chr1 180712-181178 * [3] chr1 181200-181607 * [4] chr1 191183-192084 * [5] chr1 267576-268461 * ... ... ... ... [165430] KI270713.1 13054-13909 * [165431] KI270713.1 15212-15933 * [165432] KI270713.1 21459-22358 * [165433] KI270713.1 29676-30535 * [165434] KI270713.1 36913-37813 * ------- seqinfo: 35 sequences from an unspecified genome; no seqlengths We then remove the features that correspond to chromosome scaffolds e.g. (KI270713.1) or other sequences instead of the (22+2) standard chromosomes. The function standardChromosomes in R package GenomeInfoDb lists the 'standard' chromosomes defined as sequences in the assembly that are not scaffolds; also referred to as an 'assembly molecule' in NCBI. standardChromosomes(granges(pbmc)) .list-inline {list-style: none; margin:0; padding: 0} .list-inline>li {display: inline-block} .list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex} 'chr1' 'chr2' 'chr3' 'chr4' 'chr5' 'chr6' 'chr7' 'chr8' 'chr9' 'chr10' 'chr11' 'chr12' 'chr13' 'chr14' 'chr15' 'chr16' 'chr17' 'chr18' 'chr19' 'chr20' 'chr21' 'chr22' 'chrX' 'chrY' peaks.keep <- seqnames(granges(pbmc)) %in% standardChromosomes(granges(pbmc)) pbmc <- pbmc[as.vector(peaks.keep), ] library(AnnotationHub) ah <- AnnotationHub() # Search for the Ensembl 98 EnsDb for Homo sapiens on AnnotationHub query(ah, \"EnsDb.Hsapiens.v98\") Loading required package: BiocFileCache Loading required package: dbplyr AnnotationHub with 1 record # snapshotDate(): 2023-10-23 # names(): AH75011 # $dataprovider: Ensembl # $species: Homo sapiens # $rdataclass: EnsDb # $rdatadateadded: 2019-05-02 # $title: Ensembl 98 EnsDb for Homo sapiens # $description: Gene and protein annotations for Homo sapiens based on Ensem... # $taxonomyid: 9606 # $genome: GRCh38 # $sourcetype: ensembl # $sourceurl: http://www.ensembl.org # $sourcesize: NA # $tags: c(\"98\", \"AHEnsDbs\", \"Annotation\", \"EnsDb\", \"Ensembl\", \"Gene\", # \"Protein\", \"Transcript\") # retrieve record with 'object[[\"AH75011\"]]' ensdb_v98 <- ah[[\"AH75011\"]] loading from cache require(\u201censembldb\u201d) # extract gene annotations from EnsDb annotations <- GetGRangesFromEnsDb(ensdb = ensdb_v98) # change to UCSC style since the data was mapped to hg38 seqlevels(annotations) <- paste0('chr', seqlevels(annotations)) genome(annotations) <- \"hg38\" # add the gene information to the object Annotation(pbmc) <- annotations colname_before_NS <- colnames(pbmc@meta.data) pbmc <- NucleosomeSignal(object = pbmc) colname_after_NS <- colnames(pbmc@meta.data) setdiff(colname_after_NS, colname_before_NS) pbmc <- TSSEnrichment(object = pbmc) colname_after_TSSEnrich <- colnames(pbmc@meta.data) setdiff(colname_after_TSSEnrich, colname_after_NS) # add fraction of reads in peaks pbmc$pct_reads_in_peaks <- pbmc$peak_region_fragments / pbmc$passed_filters * 100 # add blacklist ratio pbmc$blacklist_ratio <- FractionCountsInRegion( object = pbmc, assay = 'peaks', regions = blacklist_hg38_unified ) DensityScatter(pbmc, x = 'nCount_peaks', y = 'TSS.enrichment', log_x = TRUE, quantiles = TRUE) pbmc$nucleosome_group <- ifelse(pbmc$nucleosome_signal > 4, 'NS > 4', 'NS < 4') FragmentHistogram(object = pbmc, group.by = 'nucleosome_group') pbmc$nucleosome_group <- ifelse(pbmc$nucleosome_signal > 4, 'NS > 4', 'NS < 4') FragmentHistogram(object = pbmc, group.by = 'nucleosome_group') VlnPlot( object = pbmc, features = c('nCount_peaks', 'TSS.enrichment', 'blacklist_ratio', 'nucleosome_signal', 'pct_reads_in_peaks'), pt.size = 0.1, ncol = 5 ) pbmc <- subset( x = pbmc, subset = nCount_peaks > 9000 & nCount_peaks < 100000 & pct_reads_in_peaks > 40 & blacklist_ratio < 0.01 & nucleosome_signal < 4 & TSS.enrichment > 4 ) pbmc <- RunTFIDF(pbmc) pbmc <- FindTopFeatures(pbmc, min.cutoff = 'q0') pbmc <- RunSVD(pbmc) Session Infomation sessionInfo() Reference https://stuartlab.org/signac/articles/pbmc_vignette","title":"Analyze scATAC-seq data using `Signac`"},{"location":"scatac_signac_pbmc/#analysis-of-scatac-seq-data-in-pbmc-using-signac","text":"In this note, the data is from 10x. Cellranger report can be found in the link here . micromamba activate condaenv4bix_tool_notes_scatac export R_LIBS=/home/xies4/micromamba/envs/condaenv4bix_tool_notes_scatac/lib/R/library/","title":"Analysis of scATAC-seq data in PBMC using Signac"},{"location":"scatac_signac_pbmc/#data-downloading","text":"To download all the required files, you can run the following lines in a shell: getwd() '/mnt/ccrsf-static/Analysis/xies4/github_repos/ngs_software_testing_notes/docs' cat(system(\"cat ./scatac_signac_pbmc/s1_dl.sh\", intern = T), sep = \"\\n\") #!/bin/bash wget https://cf.10xgenomics.com/samples/cell-atac/2.1.0/10k_pbmc_ATACv2_nextgem_Chromium_Controller/10k_pbmc_ATACv2_nextgem_Chromium_Controller_filtered_peak_bc_matrix.h5 wget https://cf.10xgenomics.com/samples/cell-atac/2.1.0/10k_pbmc_ATACv2_nextgem_Chromium_Controller/10k_pbmc_ATACv2_nextgem_Chromium_Controller_singlecell.csv wget https://cf.10xgenomics.com/samples/cell-atac/2.1.0/10k_pbmc_ATACv2_nextgem_Chromium_Controller/10k_pbmc_ATACv2_nextgem_Chromium_Controller_fragments.tsv.gz wget https://cf.10xgenomics.com/samples/cell-atac/2.1.0/10k_pbmc_ATACv2_nextgem_Chromium_Controller/10k_pbmc_ATACv2_nextgem_Chromium_Controller_fragments.tsv.gz.tbi cat(system(\"head 10k_pbmc_ATACv2_nextgem_Chromium_Controller_singlecell.csv\", intern = T), sep=\"\\n\") barcode,total,duplicate,chimeric,unmapped,lowmapq,mitochondrial,nonprimary,passed_filters,is__cell_barcode,excluded_reason,TSS_fragments,DNase_sensitive_region_fragments,enhancer_region_fragments,promoter_region_fragments,on_target_fragments,blacklist_region_fragments,peak_region_fragments,peak_region_cutsites NO_BARCODE,20081988,3972351,3423,2118408,1159348,23059,4131,12801268,0,0,0,0,0,0,0,0,0,0 AAACGAAAGAAACGCC-1,4,0,0,0,0,0,0,4,0,0,1,0,0,0,1,0,2,4 AAACGAAAGAAAGCAG-1,3,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,1,2 AAACGAAAGAAAGGGT-1,2,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,2 AAACGAAAGAAATACC-1,17,0,0,0,0,0,0,17,0,0,11,0,0,0,11,0,14,27 AAACGAAAGAAATCTG-1,1,0,0,0,0,0,0,1,0,2,0,0,0,0,0,0,0,0 AAACGAAAGAAATGGG-1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0 AAACGAAAGAAATTCG-1,4,0,0,0,1,0,0,3,0,0,1,0,0,0,1,0,2,4 AAACGAAAGAACAGGA-1,2,0,0,0,0,0,0,2,0,0,2,0,0,0,2,0,2,4","title":"Data downloading"},{"location":"scatac_signac_pbmc/#load-r-packages","text":"library(Signac) library(Seurat) library(ggplot2) library(patchwork) library(GenomicRanges) Loading required package: SeuratObject Loading required package: sp Attaching package: \u2018SeuratObject\u2019 The following objects are masked from \u2018package:base\u2019: intersect, t Loading required package: stats4 Loading required package: BiocGenerics Attaching package: \u2018BiocGenerics\u2019 The following object is masked from \u2018package:SeuratObject\u2019: intersect The following objects are masked from \u2018package:stats\u2019: IQR, mad, sd, var, xtabs The following objects are masked from \u2018package:base\u2019: anyDuplicated, aperm, append, as.data.frame, basename, cbind, colnames, dirname, do.call, duplicated, eval, evalq, Filter, Find, get, grep, grepl, intersect, is.unsorted, lapply, Map, mapply, match, mget, order, paste, pmax, pmax.int, pmin, pmin.int, Position, rank, rbind, Reduce, rownames, sapply, setdiff, sort, table, tapply, union, unique, unsplit, which.max, which.min Loading required package: S4Vectors Attaching package: \u2018S4Vectors\u2019 The following object is masked from \u2018package:utils\u2019: findMatches The following objects are masked from \u2018package:base\u2019: expand.grid, I, unname Loading required package: IRanges Attaching package: \u2018IRanges\u2019 The following object is masked from \u2018package:sp\u2019: %over% Loading required package: GenomeInfoDb","title":"Load R packages"},{"location":"scatac_signac_pbmc/#data-preprocessing","text":"Signac uses information from two related input files, both of which can be created using CellRanger: Peak/Cell matrix. This is analogous to the gene expression count matrix used to analyze single-cell RNA-seq. However, instead of genes, each row of the matrix represents a region of the genome (a peak), that is predicted to represent a region of open chromatin. Each value in the matrix represents the number of Tn5 integration sites for each single barcode (i.e. a cell) that map within each peak. You can find more detail on the 10X Website. Fragment file. This represents a full list of all unique fragments across all single cells. It is a substantially larger file, is slower to work with, and is stored on-disk (instead of in memory). However, the advantage of retaining this file is that it contains all fragments associated with each single cell, as opposed to only fragments that map to peaks. More information about the fragment file can be found on the 10x Genomics website or on the sinto website. counts <- Read10X_h5(filename = \"10k_pbmc_ATACv2_nextgem_Chromium_Controller_filtered_peak_bc_matrix.h5\") metadata <- read.csv( file = \"10k_pbmc_ATACv2_nextgem_Chromium_Controller_singlecell.csv\", header = TRUE, row.names = 1 ) chrom_assay <- CreateChromatinAssay( counts = counts, sep = c(\":\", \"-\"), fragments = \"10k_pbmc_ATACv2_nextgem_Chromium_Controller_fragments.tsv.gz\", min.cells = 10, min.features = 200 ) pbmc <- CreateSeuratObject( counts = chrom_assay, assay = \"peaks\", meta.data = metadata ) pbmc An object of class Seurat 165434 features across 10246 samples within 1 assay Active assay: peaks (165434 features, 0 variable features) 2 layers present: counts, data Similar to scRNA-seq, you can also read the count matrix stored in three files under the folder: filtered_peak_bc_matrix : counts <- Matrix::readMM(\"filtered_peak_bc_matrix/matrix.mtx\") barcodes <- readLines(\"filtered_peak_bc_matrix/barcodes.tsv\") peaks <- read.table(\"filtered_peak_bc_matrix/peaks.bed\", sep=\"\\t\") peaknames <- paste(peaks$V1, peaks$V2, peaks$V3, sep=\"-\") colnames(counts) <- barcodes rownames(counts) <- peaknames pbmc[['peaks']] ChromatinAssay data with 165434 features for 10246 cells Variable features: 0 Genome: Annotation present: FALSE Motifs present: FALSE Fragment files: 1 granges(pbmc) GRanges object with 165434 ranges and 0 metadata columns: seqnames ranges strand <Rle> <IRanges> <Rle> [1] chr1 9772-10660 * [2] chr1 180712-181178 * [3] chr1 181200-181607 * [4] chr1 191183-192084 * [5] chr1 267576-268461 * ... ... ... ... [165430] KI270713.1 13054-13909 * [165431] KI270713.1 15212-15933 * [165432] KI270713.1 21459-22358 * [165433] KI270713.1 29676-30535 * [165434] KI270713.1 36913-37813 * ------- seqinfo: 35 sequences from an unspecified genome; no seqlengths We then remove the features that correspond to chromosome scaffolds e.g. (KI270713.1) or other sequences instead of the (22+2) standard chromosomes. The function standardChromosomes in R package GenomeInfoDb lists the 'standard' chromosomes defined as sequences in the assembly that are not scaffolds; also referred to as an 'assembly molecule' in NCBI. standardChromosomes(granges(pbmc)) .list-inline {list-style: none; margin:0; padding: 0} .list-inline>li {display: inline-block} .list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex} 'chr1' 'chr2' 'chr3' 'chr4' 'chr5' 'chr6' 'chr7' 'chr8' 'chr9' 'chr10' 'chr11' 'chr12' 'chr13' 'chr14' 'chr15' 'chr16' 'chr17' 'chr18' 'chr19' 'chr20' 'chr21' 'chr22' 'chrX' 'chrY' peaks.keep <- seqnames(granges(pbmc)) %in% standardChromosomes(granges(pbmc)) pbmc <- pbmc[as.vector(peaks.keep), ] library(AnnotationHub) ah <- AnnotationHub() # Search for the Ensembl 98 EnsDb for Homo sapiens on AnnotationHub query(ah, \"EnsDb.Hsapiens.v98\") Loading required package: BiocFileCache Loading required package: dbplyr AnnotationHub with 1 record # snapshotDate(): 2023-10-23 # names(): AH75011 # $dataprovider: Ensembl # $species: Homo sapiens # $rdataclass: EnsDb # $rdatadateadded: 2019-05-02 # $title: Ensembl 98 EnsDb for Homo sapiens # $description: Gene and protein annotations for Homo sapiens based on Ensem... # $taxonomyid: 9606 # $genome: GRCh38 # $sourcetype: ensembl # $sourceurl: http://www.ensembl.org # $sourcesize: NA # $tags: c(\"98\", \"AHEnsDbs\", \"Annotation\", \"EnsDb\", \"Ensembl\", \"Gene\", # \"Protein\", \"Transcript\") # retrieve record with 'object[[\"AH75011\"]]' ensdb_v98 <- ah[[\"AH75011\"]] loading from cache require(\u201censembldb\u201d) # extract gene annotations from EnsDb annotations <- GetGRangesFromEnsDb(ensdb = ensdb_v98) # change to UCSC style since the data was mapped to hg38 seqlevels(annotations) <- paste0('chr', seqlevels(annotations)) genome(annotations) <- \"hg38\" # add the gene information to the object Annotation(pbmc) <- annotations colname_before_NS <- colnames(pbmc@meta.data) pbmc <- NucleosomeSignal(object = pbmc) colname_after_NS <- colnames(pbmc@meta.data) setdiff(colname_after_NS, colname_before_NS) pbmc <- TSSEnrichment(object = pbmc) colname_after_TSSEnrich <- colnames(pbmc@meta.data) setdiff(colname_after_TSSEnrich, colname_after_NS) # add fraction of reads in peaks pbmc$pct_reads_in_peaks <- pbmc$peak_region_fragments / pbmc$passed_filters * 100 # add blacklist ratio pbmc$blacklist_ratio <- FractionCountsInRegion( object = pbmc, assay = 'peaks', regions = blacklist_hg38_unified ) DensityScatter(pbmc, x = 'nCount_peaks', y = 'TSS.enrichment', log_x = TRUE, quantiles = TRUE) pbmc$nucleosome_group <- ifelse(pbmc$nucleosome_signal > 4, 'NS > 4', 'NS < 4') FragmentHistogram(object = pbmc, group.by = 'nucleosome_group') pbmc$nucleosome_group <- ifelse(pbmc$nucleosome_signal > 4, 'NS > 4', 'NS < 4') FragmentHistogram(object = pbmc, group.by = 'nucleosome_group') VlnPlot( object = pbmc, features = c('nCount_peaks', 'TSS.enrichment', 'blacklist_ratio', 'nucleosome_signal', 'pct_reads_in_peaks'), pt.size = 0.1, ncol = 5 ) pbmc <- subset( x = pbmc, subset = nCount_peaks > 9000 & nCount_peaks < 100000 & pct_reads_in_peaks > 40 & blacklist_ratio < 0.01 & nucleosome_signal < 4 & TSS.enrichment > 4 ) pbmc <- RunTFIDF(pbmc) pbmc <- FindTopFeatures(pbmc, min.cutoff = 'q0') pbmc <- RunSVD(pbmc)","title":"Data preprocessing"},{"location":"scatac_signac_pbmc/#session-infomation","text":"sessionInfo()","title":"Session Infomation"},{"location":"scatac_signac_pbmc/#reference","text":"https://stuartlab.org/signac/articles/pbmc_vignette","title":"Reference"}]}